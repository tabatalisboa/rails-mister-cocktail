# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/simple_form/all/simple_form.rbi
#
# simple_form-4.1.0
module SimpleForm
  def boolean_label_class; end
  def boolean_label_class=(obj); end
  def boolean_style; end
  def boolean_style=(obj); end
  def browser_validations; end
  def browser_validations=(obj); end
  def button_class; end
  def button_class=(obj); end
  def cache_discovery; end
  def cache_discovery=(obj); end
  def collection_label_methods; end
  def collection_label_methods=(obj); end
  def collection_value_methods; end
  def collection_value_methods=(obj); end
  def collection_wrapper_class; end
  def collection_wrapper_class=(obj); end
  def collection_wrapper_tag; end
  def collection_wrapper_tag=(obj); end
  def country_priority; end
  def country_priority=(obj); end
  def custom_inputs_namespaces; end
  def custom_inputs_namespaces=(obj); end
  def default_form_class; end
  def default_form_class=(obj); end
  def default_wrapper; end
  def default_wrapper=(obj); end
  def error_method; end
  def error_method=(obj); end
  def error_notification_class; end
  def error_notification_class=(obj); end
  def error_notification_tag; end
  def error_notification_tag=(obj); end
  def field_error_proc; end
  def field_error_proc=(obj); end
  def file_methods; end
  def file_methods=(obj); end
  def form_class; end
  def generate_additional_classes_for; end
  def generate_additional_classes_for=(obj); end
  def i18n_scope; end
  def i18n_scope=(obj); end
  def include_default_input_wrapper_class; end
  def include_default_input_wrapper_class=(obj); end
  def input_class; end
  def input_class=(obj); end
  def input_field_error_class; end
  def input_field_error_class=(obj); end
  def input_field_valid_class; end
  def input_field_valid_class=(obj); end
  def input_mappings; end
  def input_mappings=(obj); end
  def inputs_discovery; end
  def inputs_discovery=(obj); end
  def item_wrapper_class; end
  def item_wrapper_class=(obj); end
  def item_wrapper_tag; end
  def item_wrapper_tag=(obj); end
  def label_class; end
  def label_class=(obj); end
  def label_text; end
  def label_text=(obj); end
  def required_by_default; end
  def required_by_default=(obj); end
  def self.additional_classes_for(component); end
  def self.boolean_label_class; end
  def self.boolean_label_class=(obj); end
  def self.boolean_style; end
  def self.boolean_style=(obj); end
  def self.browser_validations; end
  def self.browser_validations=(obj); end
  def self.build(options = nil); end
  def self.button_class; end
  def self.button_class=(obj); end
  def self.cache_discovery; end
  def self.cache_discovery=(obj); end
  def self.collection_label_methods; end
  def self.collection_label_methods=(obj); end
  def self.collection_value_methods; end
  def self.collection_value_methods=(obj); end
  def self.collection_wrapper_class; end
  def self.collection_wrapper_class=(obj); end
  def self.collection_wrapper_tag; end
  def self.collection_wrapper_tag=(obj); end
  def self.configured?; end
  def self.country_priority; end
  def self.country_priority=(obj); end
  def self.custom_inputs_namespaces; end
  def self.custom_inputs_namespaces=(obj); end
  def self.default_form_class; end
  def self.default_form_class=(obj); end
  def self.default_input_size=(*arg0); end
  def self.default_wrapper; end
  def self.default_wrapper=(obj); end
  def self.eager_load!; end
  def self.error_method; end
  def self.error_method=(obj); end
  def self.error_notification_class; end
  def self.error_notification_class=(obj); end
  def self.error_notification_tag; end
  def self.error_notification_tag=(obj); end
  def self.field_error_proc; end
  def self.field_error_proc=(obj); end
  def self.file_methods; end
  def self.file_methods=(obj); end
  def self.form_class; end
  def self.form_class=(value); end
  def self.generate_additional_classes_for; end
  def self.generate_additional_classes_for=(obj); end
  def self.i18n_scope; end
  def self.i18n_scope=(obj); end
  def self.include_component(component); end
  def self.include_default_input_wrapper_class; end
  def self.include_default_input_wrapper_class=(obj); end
  def self.input_class; end
  def self.input_class=(obj); end
  def self.input_field_error_class; end
  def self.input_field_error_class=(obj); end
  def self.input_field_valid_class; end
  def self.input_field_valid_class=(obj); end
  def self.input_mappings; end
  def self.input_mappings=(obj); end
  def self.inputs_discovery; end
  def self.inputs_discovery=(obj); end
  def self.item_wrapper_class; end
  def self.item_wrapper_class=(obj); end
  def self.item_wrapper_tag; end
  def self.item_wrapper_tag=(obj); end
  def self.label_class; end
  def self.label_class=(obj); end
  def self.label_text; end
  def self.label_text=(obj); end
  def self.required_by_default; end
  def self.required_by_default=(obj); end
  def self.setup; end
  def self.time_zone_priority; end
  def self.time_zone_priority=(obj); end
  def self.translate_labels; end
  def self.translate_labels=(obj); end
  def self.wrapper(name); end
  def self.wrapper_mappings; end
  def self.wrapper_mappings=(obj); end
  def self.wrappers(*args, &block); end
  def time_zone_priority; end
  def time_zone_priority=(obj); end
  def translate_labels; end
  def translate_labels=(obj); end
  def wrapper_mappings; end
  def wrapper_mappings=(obj); end
  extend ActiveSupport::Autoload
end
module SimpleForm::ActionViewExtensions
end
module SimpleForm::ActionViewExtensions::FormHelper
  def simple_fields_for(record_name, record_object = nil, options = nil, &block); end
  def simple_form_css_class(record, options); end
  def simple_form_for(record, options = nil, &block); end
  def with_simple_form_field_error_proc; end
end
module SimpleForm::ActionViewExtensions::Builder
  def simple_fields_for(*args, &block); end
end
module ActionView::Helpers
end
class ActionView::Helpers::FormBuilder
  include SimpleForm::ActionViewExtensions::Builder
end
module SimpleForm::Wrappers
end
class SimpleForm::Wrappers::Builder
  def initialize(options); end
  def optional(name, options = nil, &block); end
  def to_a; end
  def use(name, options = nil); end
  def wrapper(name, options = nil); end
end
class SimpleForm::Wrappers::Leaf
  def find(name); end
  def initialize(namespace, options = nil); end
  def namespace; end
  def render(input); end
end
class SimpleForm::Wrappers::Many
  def components; end
  def defaults; end
  def find(name); end
  def html_classes(input, options); end
  def html_options(options); end
  def initialize(namespace, components, defaults = nil); end
  def namespace; end
  def render(input); end
  def wrap(input, options, content); end
end
class SimpleForm::Wrappers::Single < SimpleForm::Wrappers::Many
  def html_options(options); end
  def initialize(name, wrapper_options = nil, options = nil); end
  def render(input); end
end
class SimpleForm::Wrappers::Root < SimpleForm::Wrappers::Many
  def find(name); end
  def html_classes(input, options); end
  def initialize(*args); end
  def options; end
  def render(input); end
end
class SimpleForm::Railtie < Rails::Railtie
end
class SimpleForm::WrapperNotFound < StandardError
end
